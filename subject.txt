
s S p d D i o O u U x X c C

flags::

	'#' :	c d i n p s u
				->>> no effects
			o
				->>> the precision of the number is increased to force
				the first character of the output string to a zero
				a tester: cas du parametre precision: selon tanit, on met la precision puis on rajoute un zero
			x X
				->>> a non zero result has the string 0x (or 0X) prepended to it.

	'0' :	->>> the converted value is padded on the left with zeros rather than blanks
			d i o u i x X
				->>> if a precision is given, 0 flag is ignored

	'-' :	the converted value is to be left adjusted on the field boundary.
			the converted value is padded to right with blanks,
			rather than on the left with blanks or zeros

	' ' :	d i
			->>> a blank should be left before a positive number produced by a SIGNED conversion

	'+' :	d i
			->>> A sign must always be placed before a number produced by a SIGNED conversion

MFW::

	if the converted value has fewer characters than the field width, it will padded with spaces on the left
	flag '-'
		->> right
	to fill out the field width

precision::

	d i o u i x X
		->>> gives the minimum number of digits to appear
	s
		->>> the maximum number of characters to be printed from a string for s conversion
	


http://alain.dancel.free.fr/c/c60_10.htm ::

Elle permet l'écriture formatée sur le flux standard de sortie stdout (l'écran par défaut).

La chaîne de caractères format peut contenir à la fois :

Des caractères à afficher,
Des spécifications de format.
Il devra y avoir autant d'arguments à la fonction printf qu'il y a de spécifications de format.
Valeur retournée :
le nombre d'octets effectivement écrits ou la constante EOF (-1) en cas d'erreur.

Spécificateurs de format :
ils sont introduites par le caractère % et se terminent par le caractère de type de conversion suivant la syntaxe suivante :

	% [drapeaux] [largeur] [.precision] [modificateur] type

FLAGS :
drapeaux 	Signification
rien		justifié à droite et complété à gauche par des espaces
-			justifié à gauche et complété à droite par des espaces
+			les résultats commencent toujours par le signe + ou -
espace		le signe n'est affiché que pour les valeurs négatives
#			forme alternative. Si le type de conversion est :
   				c,s,d,i,u : sans effet
   				o : un 0 sera placé devant la valeur
   				x, X : 0x ou 0X sera placé devant la valeur
   				e, E, f : le point décimal sera toujours affiché
   				g, G : même chose que e ou E, mais sans supprimer les zéros à droite


largeur : elle précise la nombre de caractères n qui seront affichés.
Si la valeur à afficher dépasse la taille de la fenêtre ainsi définie, C utilise quand même la place nécessaire.

largeur 	Effet sur l'affichage
n			affiche n caractères, complété éventuellement par des espaces
0n			affiche n caractères, complété éventuellement à gauche par des 0
*			l'argument suivant de la liste fournit la largeur


precision : elle précise pour :
	un entier, le nombre de chiffres à afficher
	un réel, le nombre de chiffres de la partie décimale à afficher (avec arrondi)
	les chaînes, le nombre maximum de caractères à afficher.

.precision 	Effet sur l'affichage
rien		précision par défaut :
				d,i,o,u,x : 1 chiffre
				e, E, f : 6 chiffres pour la partie décimale.
.0			d,i,o,u,x : précision par défaut
			e, E, f : pas de point décimal
.n			n caractères au plus
*			l'argument suivant de la liste contient la précision

modificateur : Il précise comment sera interprété l'argument.
Modificateur	interprétation comme
h				un entier de type short (d,i,o,u,x,X)
l				un entier de type long (d,i,o,u,x,X)
L				un réel de type long double (e,E,f,g,G)

type : type de conversion de l'argument.
Type	Format de la sortie
d ou i		entier décimal signé
o			entier octal non signé
u			entier décimal non signé
x			entier hexadécimal non signé
X			entier hexadécimal non signé en majuscules
f			réel de la forme [-]dddd.ddd
e			réel de la forme [-]d.ddd e [+/-]ddd
E			comme e mais l'exposant est la lettre E
g			format e ou f suivant la précision
G			comme g mais l'exposant est la lettre E
c			caractère
s			affiche les caractères jusqu'au caractère nul '\0'
			ou jusqu'à ce que la précision soit atteinte
p			pointeur

Exemple :
#include <stdio.h>

main() {
  int nbre = 5;
  char *chaine = "Le langage C";
  long prix = 12.0L;
  long double result = prix * nbre;

  printf("Bonjour\n");
  printf("Nombre %d  prix %ld Total %9ld\n",nbre, prix, prix * nbre);
  printf("%s est facile\n", chaine);
  printf("%8.2Lf \n", result);
  printf("%*.*Lf \n", 8, 2, result);  /* equivalent a   %8.2Lf    */
  printf("\n");                     /* affichage du caractère % */
  return 0;
}
/*-- résultat de l'exécution ------------------------------------
Bonjour
Nombre 5  prix 12 Total        60
Le langage C est facile
   60.00
   60.00

-----------------------------------------------------------------*/

Exemple d'utilisation des formats numériques :
 instruction C	  résultat
  printf("|%d|\n",12345);	  |12345|
  printf("|%+d|\n",12345);	  |+12345|
  printf("|%8d|\n",12345);	  | 12345|
  printf("|%8.6d|\n",12345);	  | 012345|
  printf("|%x|\n",255);	  |ff|
  printf("|%X|\n",255);	  |FF|
  printf("|%#x|\n",255);	  |0xff|
  printf("|%f|\n",1.23456789012345);  	  |1.234568|
  printf("|%10.4f|\n",1.23456789);	  | 1.2346|




Le format de conversion est indiqué par une chaîne de caractères,
commençant et se terminant dans son état de décalage initial.
La chaîne de format est composée d'indicateurs :
les caractères ordinaires (différents de %),
qui sont copiés sans modification sur la sortie,
et les spécifications de conversion,
qui sont mises en correspondance avec les arguments suivants.
Les spécifications de conversion sont introduites par le caractère %,
et se terminent par un indicateur de conversion.
Entre eux peuvent se trouver (dans l'ordre),
zéro ou plusieurs attributs,
une valeur optionnelle de largeur minimal de champ,
une valeur optionnelle de précision,
et un éventuel modificateur de longueur.



MAN ::

MINIMAL FIELD WIDTH

An optional decimal digit string specifying a minimum field width.  If the
converted value has fewer characters than the field width, it will be
padded with spaces on the left (or right, if the left-adjustment flag has
been given) to fill out the field width.


PRECISION

An optional precision, in the form of a period . followed by an optional
digit string.  If the digit string is omitted, the precision is taken as
zero.  This gives the minimum number of digits to appear for d, i, o, u, x,
and X conversions, the number of digits to appear after the decimal-point
for a, A, e, E, f, and F conversions, the maximum number of significant
digits for g and G conversions, or the maximum number of characters to be
printed from a string for s conversions.


CONVERSIONS

diouxX		The int (or appropriate variant) argument is converted to signed dec-
			imal (d and i), unsigned octal (o), unsigned decimal (u), or unsigned
			hexadecimal (x and X) notation.  The letters ``abcdef'' are used for
			x conversions; the letters ``ABCDEF'' are used for X conversions.
			The precision, if any, gives the minimum number of digits that must
			appear; if the converted value requires fewer digits, it is padded on
			the left with zeros.

DOU			The long int argument is converted to signed decimal, unsigned octal,
			or unsigned decimal, as if the format had been ld, lo, or lu respec-
			tively.  These conversion characters are deprecated, and will eventu-
			ally disappear.

S			Treated as s with the l (ell) modifier.

s			The char * argument is expected to be a pointer to an array of charac-
			ter type (pointer to a string).  Characters from the array are written
			up to (but not including) a terminating NUL character; if a precision
			is specified, no more than the number specified are written.  If a pre-
			cision is given, no null character need be present; if the precision is
			not specified, or is greater than the size of the array, the array must
			contain a terminating NUL character.

			If the l (ell) modifier is used, the wchar_t * argument is expected to
			be a pointer to an array of wide characters (pointer to a wide string).
			For each wide character in the string, the (potentially multi-byte)
			sequence representing the wide character is written, including any
			shift sequences.  If any shift sequence is used, the shift state is
			also restored to the original state after the string.  Wide characters
			from the array are written up to (but not including) a terminating wide
			NUL character; if a precision is specified, no more than the number of
			bytes specified are written (including shift sequences).  Partial char-
			acters are never written.  If a precision is given, no null character
			need be present; if the precision is not specified, or is greater than
			the number of bytes required to render the multibyte representation of
			the string, the array must contain a terminating wide NUL character.

p			The void * pointer argument is printed in hexadecimal (as if by `%#x'
			or `%#lx').

%			A `%' is written.  No argument is converted.  The complete conversion
			specification is `%%'.


FLAGS

'#'			The value should be converted to an ``alternate form''.  For
			c, d, i, n, p, s, and u conversions, this option has no
			effect.  For o conversions, the precision of the number is
			increased to force the first character of the output string
			to a zero.  For x and X conversions, a non-zero result has
			the string `0x' (or `0X' for X conversions) prepended to it.
			For a, A, e, E, f, F, g, and G conversions, the result will
			always contain a decimal point, even if no digits follow it
			(normally, a decimal point appears in the results of those
			conversions only if a digit follows).  For g and G conver-
			sions, trailing zeros are not removed from the result as
			they would otherwise be.

'0' (zero)	Zero padding.  For all conversions except n, the converted
			value is padded on the left with zeros rather than blanks.
			If a precision is given with a numeric conversion (d, i, o,
			u, i, x, and X), the 0 flag is ignored.

'-'			A negative field width flag; the converted value is to be
			left adjusted on the field boundary.  Except for n conver-
			sions, the converted value is padded on the right with
			blanks, rather than on the left with blanks or zeros.  A -
			overrides a 0 if both are given.

 ' (space)	A blank should be left before a positive number produced by
			a signed conversion (a, A, d, e, E, f, F, g, G, or i).

'+'			A sign must always be placed before a number produced by a
			signed conversion.  A + overrides a space if both are used.


MODIFIERS

Modifier          d, i           o, u, x, X            n

hh                signed char    unsigned char         signed char *
h                 short          unsigned short        short *
l (ell)           long           unsigned long         long *
ll (ell ell)      long long      unsigned long long    long long *
